{"version":3,"sources":["Header.js","ThreeHrTable.js","actions/dateSelectionAction.js","actions/types.js","DailyRowData.js","util.js","actions/fetchActions.js","RecommendButtons.js","inputBox.js","actions/checkValidCityActions.js","summary.js","Body.js","reducers/fetchReducer.js","reducers/checkValidCityReducer.js","reducers/dateSelectionReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js","Constant.js"],"names":["Header","className","role","aria-label","ThreeHrTable","Object","keys","this","props","threeHrData","length","firstkey","date","map","row","i","time","key","src","width","height","parseFloat","toFixed","Component","connect","state","fetch","dateSelection","handleDateSelection","dispatch","type","DailyRowData","data","dailyData","onClick","constant","month_map","parseInt","split","offsetDateTime","current","offset","moment","add","format","fetchAPI","cityid","defaultCityId","APIKey","unit","then","response","json","city","country","dateList","ampm","util","push","forEach","weather_id","weather","icon","temp_max","temp_min","worst_weather_id","cloud_weather_id","worst_weather","cloud_weather","wind_max","worst_weather_icon","cloud_weather_icon","earliest_date","sort","payload","cityname","currentTemp","RecommendButtons","duplicate","cityInput","charAt","toUpperCase","substring","recommendations","checkCity","InputBox","placeholder","id","onKeyPress","e","checkValidCity","document","getElementById","value","toLowerCase","cities","error","duplicate_cities","console","log","Summary","header","Body","style","flex","initialState","defaultCityName","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","module","exports","defaultTimespan","1","2","3","4","5","6","7","8","9","10","11","12"],"mappings":"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","file":"static/js/main.046e7c34.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\n\nfunction Header() {\n  return (\n    <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\" >\n    <div className=\"navbar-brand\">\n      <p className=\"navbar-item\">\n        Weather App\n      </p>\n  \n     \n    </div>\n  </nav>\n  );\n}\n\nexport default Header;\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nclass ThreeHrTable extends Component {\r\n\r\n    render() {\r\n\r\n      if (Object.keys(this.props.threeHrData).length === 0) return (null)\r\n\r\n      let data\r\n      let firstkey = Object.keys(this.props.threeHrData)[0]\r\n      let date = this.props.date\r\n      if (date === ''){\r\n        data = this.props.threeHrData[firstkey]\r\n      } else {\r\n        data = this.props.threeHrData[date]\r\n      }\r\n \r\n      return (\r\n        data.map(function(row,i){\r\n          let time = (row[\"time\"])\r\n  \r\n        return(\r\n       \r\n          <article className=\"media\" key={time}>\r\n            <figure className=\"media-left\">\r\n              <p className=\"image is-64x64\">\r\n              <img src={`https://openweathermap.org/img/wn/${row[\"icon\"]}@2x.png`} width=\"50px\" height=\"50px\"/>\r\n              </p>\r\n            </figure>\r\n            <div className=\"media-content\">\r\n              <div className=\"content\">\r\n                \r\n                  <strong>{time}</strong>&nbsp;&nbsp;\r\n                  -&nbsp;&nbsp;\r\n                  {row[\"weather\"]}\r\n                  <br/>\r\n                  \r\n                  <p className=\"button is-small\">{parseFloat(row[\"temp_min\"]).toFixed(1)}°C</p>\r\n                  &nbsp;&nbsp;-&nbsp;&nbsp;\r\n                  <p className=\"button is-small\">{parseFloat(row[\"temp_max\"]).toFixed(1)}°C</p><br/>\r\n                  <p>Wind: {row[\"wind\"]}m/s</p>\r\n                \r\n              </div>\r\n            </div>\r\n          </article>\r\n         \r\n        )})\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  threeHrData: state.fetch.threeHrData,\r\n  date: state.dateSelection.date\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(ThreeHrTable);","import { DATE_SELECTION } from './types'\r\n\r\n//When clicking the individual dates on row of daily forecast\r\nexport const handleDateSelection = (date) => dispatch =>{\r\n    dispatch({\r\n        type: DATE_SELECTION,\r\n        date: date\r\n    })\r\n}\r\n        ","export const FETCH_API = 'FETCH_API'\r\nexport const CHECK_VALID_CITY = 'CHECK_VALID_CITY'\r\n\r\nexport const DUPLICATE_CITY = 'DUPLICATE_CITY'\r\nexport const VALID_CITY = 'VALID_CITY'\r\nexport const CITY_NOT_FOUND = 'CITY_NOT_FOUND'\r\n\r\nexport const DATE_SELECTION = 'DATE_SELECTION'\r\nexport const ON_API_LOAD = 'ON_API_LOAD'","import React, { Component } from 'react';\r\nimport constant from './Constant.js'\r\n\r\nimport { connect } from 'react-redux'\r\nimport { handleDateSelection } from './actions/dateSelectionAction'\r\n\r\nclass DailyRowData extends Component {\r\n    render() {\r\n      \r\n      let data = this.props.dailyData\r\n      if (Object.keys(data).length === 0) return (null)\r\n      \r\n      return (\r\n        <div>\r\n          <hr/>\r\n            <nav className=\"level\">\r\n        \r\n            {Object.keys(data).map((date, i) => (\r\n              \r\n                <div key={`daily${date}`} className=\"level-item has-text-centered clickableBox paddedBox\" \r\n                onClick={()=>{this.props.handleDateSelection(date)}}>\r\n                <div>\r\n                \r\n                <p className=\"is-size-4\">\r\n                    {constant.month_map[parseInt(date.split(\"-\")[1])]}\r\n                    &nbsp;{parseInt(date.split(\"-\")[2])}\r\n                </p>\r\n                <img src={`https://openweathermap.org/img/wn/${data[date][\"icon\"]}@2x.png`} width=\"50px\" height=\"50px\" />\r\n                <br/>\r\n        \r\n                {parseFloat(data[date][\"temp_min\"]).toFixed(1)} - {parseFloat(data[date][\"temp_max\"]).toFixed(1)}°C<br/>\r\n        \r\n                {(data[date][\"weather\"])}<br/>\r\n        \r\n                Wind: {(data[date][\"wind_max\"])}m/s\r\n                \r\n                </div>\r\n                </div>\r\n            ))}\r\n            \r\n            </nav>\r\n        <hr/>\r\n      </div>\r\n        \r\n      );\r\n    }\r\n  }\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  dailyData: state.fetch.dailyData,\r\n\r\n})\r\n\r\nexport default connect(mapStateToProps, {handleDateSelection})(DailyRowData);","\r\nimport moment from 'moment'\r\n\r\nexport function offsetDateTime(current, offset){\r\n    \r\n    return (moment(current).add(offset, 'hours').format('YYYY-MM-DD hh a'))\r\n}\r\n","import { FETCH_API } from './types'\r\nimport constant from '../Constant'\r\nimport * as util from '../util.js'\r\nimport { handleDateSelection } from './dateSelectionAction';\r\n\r\nexport const fetchAPI = (cityid = constant.defaultCityId) => dispatch =>{\r\n    fetch(`https://api.openweathermap.org/data/2.5/forecast?id=${cityid}&appid=${constant.APIKey}&units=${constant.unit}`)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        //Data processing here\r\n        //Set timezone offset\r\n        let offset = data[\"city\"][\"timezone\"]/3600\r\n        let city = data[\"city\"][\"name\"]\r\n        let country = data[\"city\"][\"country\"]\r\n        \r\n        data = data[\"list\"]\r\n        //Process data for 3 hour view\r\n        let threeHrData = {}\r\n        let dateList = []\r\n\r\n        //Loop through each 3hr period\r\n        for (let i = 0; i < data.length; i++){\r\n        \r\n        //Get local time\r\n        let offset_datetime = util.offsetDateTime(data[i][\"dt_txt\"], offset)\r\n        let date, time, ampm\r\n        [date, time, ampm] = (offset_datetime).split(\" \")\r\n\r\n        if (!(date in threeHrData)){\r\n            threeHrData[date] = []\r\n            dateList.push(date)\r\n        }\r\n        threeHrData[date].push({\r\n            \"time\": parseInt(time) + ampm,\r\n            \"temp_min\": data[i][\"main\"][\"temp_min\"],\r\n            \"temp_max\": data[i][\"main\"][\"temp_max\"],\r\n            \"weather\": data[i][\"weather\"][0][\"description\"],\r\n            \"weatherid\": data[i][\"weather\"][0][\"id\"],\r\n            \"wind\": data[i][\"wind\"][\"speed\"],\r\n            \"deg\": data[i][\"wind\"][\"deg\"],\r\n            \"icon\": data[i][\"weather\"][0][\"icon\"]\r\n        })\r\n        }\r\n\r\n        //Process data for daily summary\r\n        let dailyData = {}\r\n        Object.keys(threeHrData).forEach(date=>{\r\n        let temp_max = -999\r\n        let temp_min = 999\r\n        let worst_weather_id = 0\r\n        let cloud_weather_id = 800\r\n        let worst_weather = ''\r\n        let cloud_weather = 'clear sky'\r\n        let wind_max = 0\r\n        let worst_weather_icon = ''\r\n        let cloud_weather_icon = '01d'\r\n        //Get min/max temp, and worst weather and wind for that day.\r\n        for (let i = 0; i < threeHrData[date].length; i++){\r\n            if (threeHrData[date][i][\"temp_max\"] > temp_max) temp_max = threeHrData[date][i][\"temp_max\"]\r\n            if (threeHrData[date][i][\"temp_min\"] < temp_min) temp_min = threeHrData[date][i][\"temp_min\"]\r\n            if (threeHrData[date][i][\"wind\"] > wind_max) wind_max = threeHrData[date][i][\"wind\"]\r\n            if (threeHrData[date][i][\"weatherid\"] > worst_weather_id && threeHrData[date][i][\"weatherid\"] < 800)\r\n            {\r\n            worst_weather_id = threeHrData[date][i][\"weatherid\"]\r\n            worst_weather = threeHrData[date][i][\"weather\"]\r\n            worst_weather_icon= threeHrData[date][i][\"icon\"]\r\n            } \r\n\r\n            if (threeHrData[date][i][\"weatherid\"] > cloud_weather_id)\r\n            {\r\n            cloud_weather_id = threeHrData[date][i][\"weatherid\"]\r\n            cloud_weather = threeHrData[date][i][\"weather\"]\r\n            cloud_weather_icon= threeHrData[date][i][\"icon\"]\r\n            } \r\n\r\n        }\r\n\r\n        /*For daily summary,\r\n            If have multiple weather_id throughout the day, show the worst weather for that day.\r\n            Show Highest weather_id within 0 < id < 800. Otherwise show the highest value from group 8xx (cloudy statuses).\r\n        */\r\n        let weather_id\r\n        let weather\r\n        let icon\r\n        if (worst_weather_id > 0){\r\n            weather_id = worst_weather_id\r\n            weather = worst_weather\r\n            icon = worst_weather_icon\r\n        } else {\r\n            weather_id = cloud_weather_id\r\n            weather = cloud_weather\r\n            icon = cloud_weather_icon\r\n        }\r\n\r\n        dailyData[date] = {\r\n            \"temp_max\": temp_max,\r\n            \"temp_min\": temp_min,\r\n            \"weather_id\": weather_id,\r\n            \"weather\": weather,\r\n            \"wind_max\": wind_max,\r\n            \"icon\": icon\r\n        }\r\n        })\r\n\r\n        let earliest_date = (Object.keys(dailyData)).sort()[0]\r\n\r\n        dispatch({\r\n            type: FETCH_API,\r\n            payload: data,\r\n            threeHrData: threeHrData,\r\n            dailyData: dailyData,\r\n            cityname: city,\r\n            country: country,\r\n            currentTemp: threeHrData[earliest_date][0][\"temp_max\"]\r\n        })\r\n        \r\n        //Auto select the first available date on API load\r\n        dispatch(handleDateSelection(earliest_date))\r\n    \r\n    }) \r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { fetchAPI } from './actions/fetchActions'\r\n\r\nclass RecommendButtons extends Component {\r\n    render() {\r\n      if (this.props.duplicate === false) return(null)\r\n\r\n      let cityInput = this.props.cityname.charAt(0).toUpperCase() + this.props.cityname.substring(1);\r\n      \r\n      return(\r\n        <div className=\"is-centered has-text-centered\">\r\n        <p>Please select a city</p>\r\n        <div className=\"buttons is-centered\">\r\n        {Object.keys(this.props.recommendations).map((country) => (\r\n          <button key={`${country}_button`} className=\"button\" \r\n            onClick={() => this.props.fetchAPI(this.props.recommendations[country])}>\r\n          {cityInput}, {country}\r\n          </button>\r\n        ))}\r\n        </div>\r\n        <br/>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\nconst mapStateToProps = state => ({\r\n    recommendations: state.checkCity.recommendations,\r\n    cityname: state.checkCity.cityname,\r\n    duplicate: state.checkCity.duplicate\r\n  })\r\n\r\nexport default connect(mapStateToProps, { fetchAPI })(RecommendButtons);\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { checkValidCity } from './actions/checkValidCityActions'\r\n\r\nclass InputBox extends Component {\r\n    render() {\r\n      return (\r\n        <nav className=\"level\">\r\n          <div className=\"level-item\">\r\n            <div className=\"field has-addons\">\r\n              <p className=\"control\">\r\n                <input className=\"input is-fullwidth\" type=\"text\" placeholder=\"Input a city\" id=\"inputCityText\"\r\n                   onKeyPress={(e) => {\r\n                     if (e.key === \"Enter\"){\r\n                        this.props.checkValidCity(\r\n                            (document.getElementById(\"inputCityText\").value).toLowerCase()\r\n                        )\r\n                     }}}/>\r\n              </p>\r\n              <p className=\"control\">\r\n                <button className=\"button\" id=\"inputCityBtn\" onClick={() =>{\r\n                    this.props.checkValidCity(\r\n                        (document.getElementById(\"inputCityText\").value).toLowerCase()\r\n                    )\r\n                }}>\r\n                  Search\r\n                </button>\r\n              </p>\r\n            </div>\r\n        </div>\r\n      </nav>\r\n       \r\n      );\r\n    }\r\n  }\r\n\r\n \r\nexport default connect(null, { checkValidCity })(InputBox);\r\n\r\n","import { VALID_CITY, DUPLICATE_CITY, CITY_NOT_FOUND } from './types'\r\nimport { fetchAPI } from './fetchActions';\r\n\r\nimport cities from '../data/modifiedCityList.json'\r\nimport duplicate_cities from '../data/duplicateCities.json'\r\n\r\nexport const checkValidCity = (city) => dispatch =>{\r\n\r\n    if (city in cities){\r\n        let cityid = cities[city][\"id\"]\r\n        dispatch({\r\n            type: VALID_CITY,\r\n            recommendations: [],\r\n            cityname: city,\r\n            error: ''\r\n        })\r\n        dispatch(fetchAPI(cityid))\r\n      } else if (city in duplicate_cities){\r\n        //Duplicate cities, Show all recommendations\r\n        console.log(\"duplicate\")\r\n        console.log(duplicate_cities[city])\r\n        dispatch({\r\n            type: DUPLICATE_CITY,\r\n            recommendations: duplicate_cities[city],\r\n            cityname: city,\r\n            error: ''\r\n        })\r\n      \r\n      } else{\r\n        //City not found, pop error msg\r\n        dispatch({\r\n            type: CITY_NOT_FOUND,\r\n            recommendations: [],\r\n            cityname: city,\r\n            error: 'City not found. Please try again'\r\n        })\r\n      }\r\n\r\n\r\n    \r\n}\r\n        ","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\n\r\nclass Summary extends Component {\r\n    render() {\r\n      if (this.props.cityname === '') return (null)\r\n\r\n      let header = `Current Weather in ${this.props.cityname}, ${this.props.country}`\r\n      return (\r\n        <div>\r\n          <p className=\"is-size-4 has-text-weight-semibold\">{header}</p>\r\n          <br/>\r\n          <p className=\"is-size-3\">\r\n            {parseFloat(this.props.currentTemp).toFixed(1)}°C</p>\r\n          <br/>\r\n          </div>\r\n  \r\n      );\r\n    }\r\n  }\r\n\r\nconst mapStateToProps = state => ({\r\n\r\n    cityname: state.fetch.cityname,\r\n    country: state.fetch.country,\r\n    currentTemp: state.fetch.currentTemp,\r\n    \r\n})\r\n\r\nexport default connect(mapStateToProps, null)(Summary);\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport ThreeHrTable from './ThreeHrTable.js'\nimport DailyRowData from './DailyRowData.js'\nimport RecommendButtons from './RecommendButtons.js'\nimport InputBox from './inputBox.js'\nimport Summary from './summary.js'\n\nimport { connect } from 'react-redux'\nimport { fetchAPI } from './actions/fetchActions'\n\nclass Body extends Component {\n\n  //Run API calls\n  componentDidMount(){\n    this.props.fetchAPI();\n  }\n\n  render(){\n\n  return (\n    <div>\n      <section className=\"section\">\n      <div className=\"container is-centered\" style={{flex: 1}}>\n      <InputBox/>\n      <p className=\"is-size-7 has-text-danger\">{this.props.error}</p>\n      <RecommendButtons/>\n      <Summary/>\n      <DailyRowData/>\n      {this.props.date === '' ? null : <strong>Forecast for {this.props.date}</strong>}\n      <ThreeHrTable/>\n      </div>\n      </section>\n    </div>\n  );\n}\n}\n\nconst mapStateToProps = state => ({\n  data: state.fetch.data,\n  threeHrData: state.fetch.threeHrData,\n  dailyData: state.fetch.dailyData,\n  recommendations: state.fetch.recommendations,\n  cityname: state.fetch.cityname,\n\n  date: state.dateSelection.date,\n\n  error: state.checkCity.error\n})\n\nexport default connect(mapStateToProps, { fetchAPI })(Body);\n","import { FETCH_API } from '../actions/types'\r\n\r\nconst initialState = {\r\n    data: [],\r\n    threeHrData: {},\r\n    dailyData: {},\r\n    cityname: '',\r\n    country: '',\r\n    currentTemp: ''\r\n}\r\n\r\nexport default function(state = initialState, action){\r\n    switch(action.type){\r\n        case FETCH_API:\r\n            return{\r\n                ...state,\r\n                data: action.payload,\r\n                threeHrData: action.threeHrData,\r\n                dailyData: action.dailyData,\r\n                cityname: action.cityname,\r\n                country: action.country,\r\n                currentTemp: action.currentTemp\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { VALID_CITY, DUPLICATE_CITY , CITY_NOT_FOUND} from '../actions/types'\r\nimport constant from '../Constant.js'\r\n\r\nconst initialState = {\r\n    recommendations: [],\r\n    cityname: constant.defaultCityName,\r\n    error: '',\r\n    duplicate: false\r\n}\r\n\r\nexport default function(state = initialState, action){\r\n    switch(action.type){\r\n        case VALID_CITY:\r\n            \r\n            return{\r\n                ...state,\r\n                recommendations: action.recommendations,\r\n                cityname: action.cityname,\r\n                error: action.error,\r\n                duplicate: false\r\n            }\r\n\r\n        case DUPLICATE_CITY:\r\n            //console.log(action.recommendations)\r\n            return{\r\n                ...state,\r\n                recommendations: action.recommendations,\r\n                cityname: action.cityname,\r\n                error: action.error,\r\n                duplicate: true\r\n            }\r\n\r\n        case CITY_NOT_FOUND:\r\n\r\n            return{\r\n                ...state,\r\n                recommendations: action.recommendations,\r\n                cityname: action.cityname,\r\n                error: action.error,\r\n                duplicate: false\r\n            }\r\n        default:\r\n\r\n            return state;\r\n    }\r\n}","import { DATE_SELECTION } from '../actions/types'\r\nimport { ON_API_LOAD } from '../actions/types'\r\n\r\nconst initialState = {\r\n    date: ''\r\n}\r\n\r\nexport default function(state = initialState, action){\r\n    switch(action.type){\r\n        case ON_API_LOAD:\r\n            return{\r\n                ...state,\r\n                date: action.date\r\n            }\r\n        case DATE_SELECTION:\r\n            return{\r\n                ...state,\r\n                date: action.date\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport fetchReducer from './fetchReducer'\r\nimport checkValidCityReducer from './checkValidCityReducer';\r\nimport dateSelectionReducer from './dateSelectionReducer';\r\n\r\nexport default combineReducers({\r\n    fetch: fetchReducer,\r\n    checkCity: checkValidCityReducer,\r\n    dateSelection: dateSelectionReducer\r\n\r\n})","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './reducers'\r\n\r\nconst initialState = {}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(\r\n        applyMiddleware(...middleware),\r\n        //window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n)\r\n\r\nexport default store;","import React from 'react';\n\nimport './App.css';\nimport Header from './Header.js'\nimport Body from './Body.js'\n\nimport { Provider } from 'react-redux'\n\nimport store from './store'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n    <div className=\"App\">\n      <Header/>\n      <Body/>\n    </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\r\n\r\nconst defaultCityId = 1819729 //HK\r\nconst defaultCityName = 'Hong Kong' //HK\r\nconst defaultTimespan = '3h' //'3h' or 'daily'\r\nconst APIKey = 'aac94666fd0b8641675125039b6e6c22'\r\nconst unit = 'metric'\r\n\r\nconst month_map = {\r\n    1: 'Jan',\r\n    2: 'Feb',\r\n    3: 'Mar',\r\n    4: 'Apr',\r\n    5: 'May',\r\n    6: 'Jun',\r\n    7: 'Jul',\r\n    8: 'Aug',\r\n    9: 'Sep',\r\n    10: 'Oct',\r\n    11: 'Nov',\r\n    12: 'Dec'\r\n  }\r\n\r\nmodule.exports = {\r\n    defaultCityId: defaultCityId,\r\n    defaultCityName: defaultCityName,\r\n    defaultTimespan: defaultTimespan,\r\n    APIKey: APIKey,\r\n  \r\n    unit: unit,\r\n    month_map: month_map\r\n}"],"sourceRoot":""}